//Auto-generated by fwrap.py. Do not edit manually
const char* psz_hlsl_opcode_funcs_glsl = {
"	\n \
	void HLSL_mov(out float dest, float value) {\n \
	    dest = value;\n \
	}\n \
	void HLSL_mov(out float dest, vec4 value) {\n \
	    dest = value.x;\n \
	}\n \
	void HLSL_mov(out vec1 dest, vec4 value) {\n \
	    dest.x = value.x;\n \
	}\n \
	void HLSL_mov(out vec2 dest, vec4 value) {\n \
	    dest = value.xy;\n \
	}\n \
	void HLSL_mov(out vec3 dest, vec4 value) {\n \
	    dest = value.xyz;\n \
	}\n \
	void HLSL_mov(out vec4 dest, vec4 value) {\n \
	    dest = value;\n \
	}\n \
	\n \
	void HLSL_movc(out float dest, float value) {\n \
	    if(value > 0.0) dest = value;\n \
	}\n \
	void HLSL_movc(out vec2 dest, vec4 value) {\n \
	    if(value.x > 0.0) dest.x = value.x;\n \
	    if(value.y > 0.0) dest.y = value.y;\n \
	}\n \
	void HLSL_mul(out float dest, float a, float b) {\n \
	    dest = a * b;\n \
	}\n \
	void HLSL_mul(out vec3 dest, vec4 a, vec4 b) {\n \
	    dest = a.xyz * b.xyz;\n \
	}\n \
	void HLSL_mul(out vec4 dest, vec4 a, vec4 b) {\n \
	    dest = a * b;\n \
	}\n \
	\n \
	void HLSL_mad(out float dest, float a, float b, float c) {\n \
	    dest = a * b + c;\n \
	}\n \
	void HLSL_mad(out vec3 dest, vec4 a, vec4 b, vec4 c) {\n \
	    dest = a.xyz * b.xyz + c.xyz;\n \
	}\n \
	void HLSL_mad(out vec4 dest, vec4 a, vec4 b, vec4 c) {\n \
	    dest = a * b + c;\n \
	}\n \
	\n \
	void HLSL_ge(out vec4 dest, vec4 a, vec4 b) {\n \
	    dest = vec4(greaterThanEqual(a, b));\n \
	}\n \
	\n \
	void HLSL_ge(out float dest, float a, float b) {\n \
	    dest = (a >= b) ? 1 : 0;\n \
	}\n \
	\n \
	void HLSL_ige(out vec4 dest, vec4 a, vec4 b) {\n \
	    dest = vec4(greaterThanEqual(a, b));\n \
	}\n \
	\n \
	void HLSL_ige(out float dest, float a, float b) {\n \
	    dest = (a >= b) ? 1 : 0;\n \
	}\n \
	\n \
	void HLSL_lt(out vec4 dest, vec4 a, vec4 b) {\n \
	    dest = vec4(lessThan(a, b));\n \
	}\n \
	\n \
	void HLSL_lt(out float dest, float a, float b) {\n \
	    dest = (a < b) ? 1 : 0;\n \
	}\n \
	\n \
	void HLSL_ieq(out vec4 dest, vec4 a, vec4 b) {\n \
	    dest = vec4(equal(a, b));\n \
	}\n \
	\n \
	void HLSL_ieq(out float dest, float a, float b) {\n \
	    dest = (a == b) ? 1 : 0;\n \
	}\n \
	\n \
	void HLSL_sample_l(out vec4 dest, sampler2D sampler, vec4 coord, float lod) {\n \
	    dest = texture2DLod(sampler, coord.xy, lod);\n \
	}\n \
	void HLSL_sample_l(out vec3 dest, sampler2D sampler, vec4 coord, float lod) {\n \
	    dest = texture2DLod(sampler, coord.xy, lod).xyz;\n \
	}\n \
	\n \
	void HLSL_sample_l(out vec4 dest, sampler2D sampler, vec2 coord, float lod) {\n \
	    dest = texture2DLod(sampler, coord, lod);\n \
	}\n \
	void HLSL_sample_l(out vec3 dest, sampler2D sampler, vec2 coord, float lod) {\n \
	    dest = texture2DLod(sampler, coord, lod).xyz;\n \
	}\n \
	\n \
"};
